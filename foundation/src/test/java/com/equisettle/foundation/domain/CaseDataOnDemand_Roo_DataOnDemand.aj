// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.equisettle.foundation.domain;

import com.equisettle.foundation.domain.Case;
import com.equisettle.foundation.domain.CaseDataOnDemand;
import com.equisettle.foundation.domain.CaseStatusDataOnDemand;
import com.equisettle.foundation.domain.CaseTypeDataOnDemand;
import com.equisettle.foundation.domain.ClientDataOnDemand;
import com.equisettle.foundation.domain.MediatorDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect CaseDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CaseDataOnDemand: @Component;
    
    private Random CaseDataOnDemand.rnd = new SecureRandom();
    
    private List<Case> CaseDataOnDemand.data;
    
    @Autowired
    ClientDataOnDemand CaseDataOnDemand.clientDataOnDemand;
    
    @Autowired
    CaseStatusDataOnDemand CaseDataOnDemand.caseStatusDataOnDemand;
    
    @Autowired
    CaseTypeDataOnDemand CaseDataOnDemand.caseTypeDataOnDemand;
    
    @Autowired
    MediatorDataOnDemand CaseDataOnDemand.mediatorDataOnDemand;
    
    public Case CaseDataOnDemand.getNewTransientCase(int index) {
        Case obj = new Case();
        setAuditCreatedDtTime(obj, index);
        setCaseAddress(obj, index);
        setCaseDescription(obj, index);
        setCaseTitle(obj, index);
        setMaxNegotiationAttemptsAllowed(obj, index);
        return obj;
    }
    
    public void CaseDataOnDemand.setAuditCreatedDtTime(Case obj, int index) {
        Calendar auditCreatedDtTime = Calendar.getInstance();
       // obj.setAuditCreatedDtTime(auditCreatedDtTime);
    }
    
    public void CaseDataOnDemand.setCaseAddress(Case obj, int index) {
        String caseAddress = "caseAddress_" + index;
        if (caseAddress.length() > 255) {
            caseAddress = caseAddress.substring(0, 255);
        }
        obj.setCaseAddress(caseAddress);
    }
    
    public void CaseDataOnDemand.setCaseDescription(Case obj, int index) {
        String caseDescription = "caseDescription_" + index;
        if (caseDescription.length() > 255) {
            caseDescription = caseDescription.substring(0, 255);
        }
        obj.setCaseDescription(caseDescription);
    }
    
    public void CaseDataOnDemand.setCaseTitle(Case obj, int index) {
        String caseTitle = "caseTitle_" + index;
        if (caseTitle.length() > 255) {
            caseTitle = caseTitle.substring(0, 255);
        }
        obj.setCaseTitle(caseTitle);
    }
    
    public void CaseDataOnDemand.setMaxNegotiationAttemptsAllowed(Case obj, int index) {
        Integer maxNegotiationAttemptsAllowed = new Integer(index);
        obj.setMaxNegotiationAttemptsAllowed(maxNegotiationAttemptsAllowed);
    }
    
    public Case CaseDataOnDemand.getSpecificCase(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Case obj = data.get(index);
        Integer id = obj.getCaseId();
        return Case.findCase(id);
    }
    
    public Case CaseDataOnDemand.getRandomCase() {
        init();
        Case obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getCaseId();
        return Case.findCase(id);
    }
    
    public boolean CaseDataOnDemand.modifyCase(Case obj) {
        return false;
    }
    
    public void CaseDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Case.findCaseEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Case' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Case>();
        for (int i = 0; i < 10; i++) {
            Case obj = getNewTransientCase(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
