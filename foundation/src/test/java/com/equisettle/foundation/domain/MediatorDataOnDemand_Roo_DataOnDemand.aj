// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.equisettle.foundation.domain;

import com.equisettle.foundation.domain.Mediator;
import com.equisettle.foundation.domain.MediatorDataOnDemand;
import com.equisettle.foundation.domain.MediatorTypeDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect MediatorDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MediatorDataOnDemand: @Component;
    
    private Random MediatorDataOnDemand.rnd = new SecureRandom();
    
    private List<Mediator> MediatorDataOnDemand.data;
    
    @Autowired
    MediatorTypeDataOnDemand MediatorDataOnDemand.mediatorTypeDataOnDemand;
    
    public Mediator MediatorDataOnDemand.getNewTransientMediator(int index) {
        Mediator obj = new Mediator();
        setAuditCratedDtTime(obj, index);
        setMediatorAddress(obj, index);
        setMediatorName(obj, index);
        return obj;
    }
    
    public void MediatorDataOnDemand.setAuditCratedDtTime(Mediator obj, int index) {
        Calendar auditCratedDtTime = Calendar.getInstance();
        obj.setAuditCratedDtTime(auditCratedDtTime);
    }
    
    public void MediatorDataOnDemand.setMediatorAddress(Mediator obj, int index) {
        String mediatorAddress = "mediatorAddress_" + index;
        if (mediatorAddress.length() > 255) {
            mediatorAddress = mediatorAddress.substring(0, 255);
        }
        obj.setMediatorAddress(mediatorAddress);
    }
    
    public void MediatorDataOnDemand.setMediatorName(Mediator obj, int index) {
        String mediatorName = "mediatorName_" + index;
        if (mediatorName.length() > 255) {
            mediatorName = mediatorName.substring(0, 255);
        }
        obj.setMediatorName(mediatorName);
    }
    
    public Mediator MediatorDataOnDemand.getSpecificMediator(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Mediator obj = data.get(index);
        Integer id = obj.getMediatorId();
        return Mediator.findMediator(id);
    }
    
    public Mediator MediatorDataOnDemand.getRandomMediator() {
        init();
        Mediator obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getMediatorId();
        return Mediator.findMediator(id);
    }
    
    public boolean MediatorDataOnDemand.modifyMediator(Mediator obj) {
        return false;
    }
    
    public void MediatorDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Mediator.findMediatorEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Mediator' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Mediator>();
        for (int i = 0; i < 10; i++) {
            Mediator obj = getNewTransientMediator(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
